type Pair = array[2] of int;
type Matrix = array[3][3] of fixedpt;

/* helper function, because calculating fibonacci numbers is hard */
int function fibonacci(p:Pair)
begin
    begin
        return p[0] + p[1];
    end;
end;

/* calculates the n'th fibonacci number, probably */
int function fibonacci(num:int)
begin
    begin
        if num = 0 then return 0;
        else
        begin
            var current, value : int := 0;
            var p : Pair;
            p[0] := 0;
            p[1] := 1;
            /* simplest way I could think of for an infinite loop */
            while ((1 + 2 * 3) = ((1 + 2) * 3 - (2))) & 1 do
            begin
                value := fibonacci(p);
                p[0] := p[1];
                p[1] := value;
                current := current + 1;
                /* definitely the best way to exit a loop */
                if current = num then break;
                endif;
            end;
            enddo;
            return current;
        end;
        endif;
    end;
end;

void function no_params()
begin
    begin
        print(0);
    end;
    begin
        print(1);
    end;
end;

/* multiplies 3x3 matrices */
Table function mat_mult(m1: Matrix, m2: Matrix)
begin
    begin
        type Fake = array[2] of int;
        var ret : Matrix;
        var i, j, k, sum : int := 0;
        for i := 0 to 2 do
            for j := 0 to 2 do
            begin
                sum := 0;
                for k := 0 to 2 do
                    sum := sum + m1[k][i] * list2[j][k];
                enddo;
                ret[i][j] := sum;
            end;
            enddo;
        enddo;
        return ret;
    end;
end;

void function print_wrapper(i:int)
begin
    begin
        printi(i);
    end;
end;

void main()
begin
    begin
        type MatrixList = array[27] of fixedpt;

        var m1, m2, m3 : Matrix := 0.0;
        var list1 : MatrixList;
        var a1 : MatrixList;
        var x : int := 5;
        var ret, i, j : int := 0;
        ret := fibonacci(5);

        print_wrapper(ret);

        m1[0][0] := 1.0;
        m2[0][0] := 1.0;
        m1[1][1] := 1.0;
        m2[1][1] := 1.0;
        m1[2][2] := 1.0;
        m2[2][2] := 1.0;
        m3 := mat_mult(m1, m2);
        for i := 0 to 2 do
            for j := 0 to 2 do
                list1[j + i * 3] := m3[i][j];
            enddo;
        enddo;
        for i := 0 to 26 do
            print_wrapper(list1[i]);
        enddo;
    end;
end;

