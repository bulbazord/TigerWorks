/*TYPE DECLARATIONS*/
type intType = int;
type fixedptType = fixedpt; 
type singleArrayTypeInt = array[5] of int;
type singleArrayTypeFixedpt = array[5] of fixedpt;
type doubleArrayTypeInt = array[5][5] of int;
type doubleArrayTypeFixedpt = array[5][5] of fixedpt;

void function voidFuncBreak()
    begin
        begin
            break;
        end;
    end;
intType function intTypeFuncBreak()
    begin
        begin
            break;
        end;
    end;
int function intFuncBreak() 
    begin
        begin
            break;
        end;
    end;
int function intFuncBreakParam(param1:int)
    begin
        begin
            break;
        end;
    end;
int function intFuncBreakParams(param1:int, param2:intType, param3:fixedpt)
    begin
        begin
            break;
        end;
    end;
int function intFuncNestedBlock() 
    begin
        begin
            begin
                begin   
                    begin
                        break;
                    end;
                end;
            end;
        end;
    end;
void function altVoidFunc() 
    begin
        begin
            break;
        end;
    end;
void function varVoidFunc()
    begin
        begin
            var var1, var2, var3 : fixedpt;
            var var4, var5, var6 : int := 1337;
            var var7, var8, var9 : intType;
            break;
            break;
                begin
                    var1 := 1;
                    var1 := var1 + var1;
                    var1 := var1 - var1;                    
                    var1 := var1 * var1;                                        
                    var1 := var1 / var1;
                    var1 := var1 = var1;
                    var1 := var1 <> var1;
                    var1 := var1 < var1;
                    var1 := var1 > var1;
                    var1 := var1 <= var1;
                    var1 := var1 > var1;
                    var1 := var1 >= var1;
                    var1 := var1 & var1;
                    var1 := var1 | var1;
                    var1[0] := 1;
                    var1[0][0] := 1;
                    var1[0] := var1[0] + var1;
                    var1[0] := var1 + var1[0];
                    var1[0] := var1[0][0] + var1;
                    var1[0] := var1 + var1[0][0];
                    var1[0][0] := var1[0] + var1;
                    var1[0][0] := var1 + var1[0];
                    var1[0][0] := var1[0][0] + var1[0];
                    var1 := (1+(2+(3+(var2[0][0] / (1 & 2)))));
                    if var1 then
                        var1 := var1 + var1;
                        if var2 then
                            var2:= var3[0] | var3[423][123123];
                        else
                            var3:= 2;
                        endif;
                        while var1 > var2 do
                            var1:= var1 - 1;
                            for var4 := 234-234234 to 234 + var2 do
                                for var5 := 2 to var2 do
                                    X(1,2,3);
                                    Y(1,2);
                                    var23 := Z(1);
                                enddo;
                                break;
                            enddo;
                        enddo;
                    endif;
                    
  
                end;
        end;
    end;
    
void main()
    begin
        begin
            asd();
            asdf();
            asdfaSDasd();
            KASLDJLKJSD();
            break;
        end;
    end;
